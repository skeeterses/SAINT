(ql:quickload "trivia")
(use-package :trivia)

(defun elf (func)
  (match func
	 ((guard (list a b)
		 (and (constant? a) (dx? b)))
	  (list a (char b 1)))
	 ((guard (list (list 'exp a) b)
		 (and (variable? a) (dx? b)))
		 (list 'exp a))
	 ((guard (list (list 'sin a) b)
		 (and (variable? a) (dx? b)))
	  (list '- 'cos a))
	 ((guard (list (list 'expt a b) c)
		 (and (constant? a) (variable? b) (dx? c)))
	  (list (list 'expt a b) '/ (list 'log b)))
	 ((guard (list (list 'log a b) c)
		 (and (constant? b) (variable? a) (dx? c)))
	  (list (list a (list 'log a b)) '- (list a '/ (list 'log b))))
	 ((guard (list (list 'cos a) b)
		 (and (variable? a) (dx? b)))
	  (list 'sin a))
	 ((guard (list (list 'tan a) b)
		 (and (variable? a) (dx? b)))
	  (list 'log (list 'sec a)))
	 ((guard (list (list 'cot a) b)
		 (and (variable? a) (dx? b)))
	  (list 'log (list 'sin a)))
	 ((guard (list (list 'sec a) b)
		 (and (variable? a) (dx? b)))
	  (list 'log (list (list 'sec a) '+ (list 'tan a))))
	 ((guard (list (list 'csc a) b)
		 (and (variable? a) (dx? b)))
	  (list 'log (list (list 'csc a) '- (list 'cot a))))
	 ((guard (list (list 'asin a) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list (list 'acos a) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list (list 'atan a) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list (list 'acot a) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list (list 'asec a) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list (list 'acsc a) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list (list 'expt (list 'sec a) 2) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list (list 'expt (list 'csc a) 2) b)
		 (and (variable? a) (dx? b)))
	  (list '()))
	 ((guard (list b '/ a)
		 (and (variable? a) (dx? b)))
	  (list 'log a))
	 ((guard (list (list 'expt a b) c)
		 (and (variable? a) (numberp b) (dx? c)))
	  (list (list 'expt a (+ b 1)) '/ (+ b 1)))
	 ((guard (list (list 'expt a b) c)
		 (and (variable? a) (constant? b) (dx? c)))
	  (list (list 'expt a (list b '+ 1)) '/ (list b '+ 1)))))


;  (match func	 	 
;	 ((list 'exp a) (list 'exp a))
;	 ((list 'sin a) (list '- 'cos a))
;	 ((list 'cos a) (list 'sin a))
	
	  
(defun dx? (elem)
  (if (stringp elem)
    (and (= (length elem) 2)
	 (char= (char elem 0) #\d)
	 (alpha-char-p (char elem 1)))
    nil))

(defun constant? (elem)
  (cond ((numberp elem) elem)
	((characterp elem)
	 (if (upper-case-p elem)
	   elem
	   nil))
	 (t nil)))

(defun variable? (elem)
  (cond ((characterp elem)
	 (if (lower-case-p elem)
	   elem
	   nil))
	(t nil)))
